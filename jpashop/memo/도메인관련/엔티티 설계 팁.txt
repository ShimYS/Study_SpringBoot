** 실무에서는 가급적 Getter는 열어두고, Setter는 꼭 필요한 경우에만 사용하는 것을 추천
- Getter는 아무리 호출한다해도 그거 자제초를 문제가 되지 않는다. 하지만 Setter는 데이터가
변경될 수 있기 때문에 나중에는 어느 시점에 어디서 값이 변경되는지 알기가 어렵다. 

** 엔티티 식별자는 id를 사용하고 pk 컬럼명은 '테이블명_id'를 사용하는게 좋다.

** 실무에서는 @ManyToMany를 절대 사용하지 말것. 이유는 중간 테이블에 FK를 제외하고는
다른 속성을 추가 할 수가 없기 때문이다.

** 값 타입 (벨류클래스)은 변경 불가능하게 설계해야 한다.
- @Setter를 제거하고, 생성자에게 값을 모두 초기화해서 변경 불가능한 클래스를 만들어야 한다.


** Cascade
- Cascade가 persist를 전파한다.

public class Order {

    @Id @GeneratedValue
    @Column(name = "order_id")
    private Long id;

    @ManyToOne(fetch = LAZY)
    @JoinColumn(name = "member_id")
    private Member member;

    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL)
    private List<OrderItem> orderItems = new ArrayList<>();

    @OneToOne(fetch = LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "delivery_id")
    private Delivery delivery;
}

=> orderItem을 따로 저장해야 하는데, cascade를 설정하면 order만 저장해도 자동으로
orderItem들이 저장된다.
=> delivery도 객체만 넣어두면 order저장시 자동으로 저장된다.


** 연관관계 편의 메서드
양방향 관계일때(속성이 컬렉션이나 객체인경우??) 하나의 메서드로 양쪽에서 해야할 일을 처리할 수 있다.
예시 )
   ''' OrderClass
   // 연관관계 메서드
   public void setMember (Member member) {
        this.member = member;
        member.getOrders().add(this);
    }
   
   ''' MainClass
    /*
        기존방식
        Member member = new Member();
        Order order = new Order();

        member.getOrders().add(order);
        order.setMember(member);
     */


