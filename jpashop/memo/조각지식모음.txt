** 스프링부트 플러그인
- 라이브러리들에 대한 의존성까지 관리를해준다.(버전까지) 따라서 스프링부트 플로그인만 올리면 다른 라이브러리까지 올라간다.


** 영속성
- 같은 영속성 컨텍스트 안에서는 id값이 같으면 같은 Entity이다.
예시) 아래의 코드에서 findMember와 member는 동일한 Entity이다.
    @Test
    @Transactional
    //@Rollback(false)
    public void testMember() throws Exception {
        //given
        Member member = new Member();
        member.setName("memberA");
        // when
        Long savedId = memberRepository.save(member);
        Member findMember = memberRepository.find(savedId);
        // then
        Assertions.assertThat(findMember.getId()).isEqualTo(member.getId());
        Assertions.assertThat(findMember.getName()).isEqualTo(member.getName());
        Assertions.assertThat(findMember).isEqualTo(member);
    }


** 스프링부트가 지원하는/하지않는 라이브러리
- 왠만한 라이브러리들은 스프링부트가 적합한 버전을 설정해두었기 때문에 라이브러리를 추가할때 버전을 입력하지 않아도 된다.
만약 스프링부트가 지원하지 않는 라이브러리라면 추가시 버전을 기입해야 한다.
예시)
    지원하는 라이브러리
        implementation 'org.springframework.boot:spring-boot-devtools'
    지원하지 않는 라이브러리
        implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'


** 관계형 데이터베이스의 다대다 관계
- 일반적으로 다대다 관계는 불가능하다. 중간에 맵핑테이블을 만들어서 1대다, 다대1 관계로 풀어야 한다.


** 도메인 모델 패턴
- 서비스 계층은 단순히 엔티티에 필요한 요청을 위임하는 역할을 한다. 이처럼 엔티티가 비즈니스 로직을 가지고
객체 지향의 특성을 적응 활용하는 것.
- Repository없이 엔티티의 메서드로 단위테스트를 할 수 있다.

** 트랜잭션 스크립트 패턴
- 엔티티에는 비즈니스 로직이 거의 없고 서비스 계층에서 대부분의 비즈니스 로직을 처리하는 것

** 참고로 하나의 프로젝트 안에서도 도메인 모델 패턴과 트랜잭션 스크립트 모델 패턴이 양립한다.

** 기존 Date 사용시 어노테이션을 해줘야 하지만 자바8 이후부터는 LocalDateTime을 사용시 JPA가 알아서 처리해준다.