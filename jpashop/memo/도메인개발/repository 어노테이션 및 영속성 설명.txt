- 스프링 제공
@Repository를 Class에 붙인다 : 컴포넌트 스캔에 의해서 자동으로 스프링 빈으로 등록


- JPA 제공
@PersistenceContext을 private EntityManager em에 붙이면 아래와 같이 EntityManagerFactory와
EntityManager를 관리해준다. 즉, EntityManager를 스프링이 자동으로 주입해주며 사용만 하면 된다.

영속
EntityManager em = entityManagetFanctory.createEntityManager();
em.getTransaction().begin();
em.persist(객체);
준영속
em.detach(객체);
삭제
em.remove(객체);

** 영속성 컨텍스트의 이점 : Application과 DB사이의 중간 계층의영속성 컨텍스트가 존재하는 
이유는 버퍼링, 캐싱등의 이점이 있기 때문이다.
1차 캐시 : 영속성 컨텍스트라고 이해해도 된다. Map<key, value>로 저장된다.
key는 DB상의 pk값이고, value는 해당 Entity 자체이다.
1차캐시 조회 : em.find()를 하면 DB보다 먼저 1차 캐시를 조회하고, 캐시에 없느면 DB에서 꺼내와 반환한다.

--------------------------------------------------------------------------------------------
** 엔티티 등록 (트랜잭션을 지원하는 쓰기 지연)
EntityManager em = emf.createEntityManager();
EntityTransaction transaction = entityManager.getTransaction();
transaction.begin();

em.persist(객체1);
em.persist(객체2);

1) 객체1이 1차 캐시에 저장된다.
2) 1)과 동시에 JPA가 Entity를 분석하여 insert Query를 만든다.
3) insert Query를 쓰기 지연 SQL 저장소 라는 곳에 쌓는다.
4) DB에 바로 넣지 않고 기다린다.
5) 객체2도 동일

transaction.commit();

6) 쓰기 지연 SQL 저장소에 쌓여있는 Query들을 DB로 날린다(flush())
  - flush() 는 1차 캐시를 지우지 않는다. 쿼리들을 DB에 날려서 DB와 싱크를 맞추는 역할을 한다.
7) flush()후에 실제 DB Transaction이 커밋된다.(commit())
*** persistence.xml에 옵션을 줘서 commit 직전까지 insert query를 해당 사이즈 만큼 모아서
한번에 처리하기도 가능하다(성능 개선) <property name="hibernate.jdbc.batch_size" value=10/>
--------------------------------------------------------------------------------------------
** 엔티티 수정 (변경감지 dirty checking)
EntityManager em = emf.createEntityManager();
EntityTransaction transaction = entityManager.getTransaction();
transaction.begin();

// 영속 엔티티 조회
Member 객체1 = em.find(Member.class, "객체1id");

1) 1차캐시 
 - @id, Entity, Snapshot(값을 읽어온 최초의 상태)
 - Snapshot : 영속성 컨텍스트에 최초로 값이 들어왔을 때의 상태값을 저장한다.

// 영속 엔티티 데이터 수정
객체1.setUsername("hi");
객체1.setAge(10);

2) 변경감지
transaction.commit();
 
 - flush()가 일어날 때 엔티티와 스냅샷을 일일이 비교한다.
 - 변경사항이 있으면 update query를 만든다.
 - 해당 update query를 쓰기 지연 sql 저장소에 넣는다.
 - update query를 db에 반영한 후 commit() 한다.
(기본적으로 모든 필드를 업데이트 하며 @DynamicUpdate를 통해 수정된 필드만 반영되도록 할 수 있다.)

*** em.update(객체1) 또는 em.persist(객체1) 일너 코드가 필요없음
데이터를 set하면 해당 데이터의 변경을 감지하여 자동으로 update query가 나간다.
--------------------------------------------------------------------------------------------
** 엔티티 삭제
조회후
em.remove(객체1); 

- Transaction의 commit 시점에 delete query가 나간다.


** 영속성 컨텍스트 : https://gmlwjd9405.github.io/2019/08/06/persistence-context.html