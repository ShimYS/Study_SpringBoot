<정적컨텐츠>
  파일을 클라이언트에 그대로 전달하는 방식의 웹 개발
  톰캣서버가 요청을 받아 스프링 컨테이너에 넘긴다. 요청된 페이지를 컨트롤로에서
 찾는다. 요청된 페이지가 없으면 내부(resources)에서 해당 페이지를 찾아서 클라이언트
 에 반환한다.


<MVC와 템플릿 엔진>
  Model : 
  View : 화면을 그리는데 모든 역량을 집중
  Controller : 비지니스 로직, 내부 로직을 처리하는데 집중

  JSP, PHP 서버에서 로직을 통해 데이터를 바꿔서 전달하는 방식의 웹개발

  예전에는 view에서 jsp를 가지고 모든걸 다 했다 => 모델1방식
  view안에서 컨트롤러, 데이터베이스 접근, 로직 처리 모든걸 한다.

  요즘에는 model, view, controller를 모두 분리해서 처리한다.
  model객체에 데이터를 담아서 처리  
  
  controller에서 로직 처리후 viewResolver에게 보내서 처리한다.
  view에서 템플릿 엔진을 활용해서 데이터를 랜더링 하고 랜더링된 페이지 클라이언트에 전달
  

<API>
  JSON이라는 데이터 구조 포맷으로 클라이언트에 전달하는 방식의웹 개발 뷰, 리액트,
 서버간의 통신을 할때 사용한다. 뷰나 리액트를 사용할 경우 데이터만 내려받아 
 프론트단에서 데이터를 조작하는 방식이다.

 @ResponseBody 를 사용하면 html body에 데이터를 직접 넣어주겠다는 뜻이다.
 
 html페이지가 없어도 웹 브라우저에 데이터를 그대로 내려준다.

   사실 api를 사용하는 진짜 이유는 객체를 내려줄때 이다. 객체를 내려주면 JSON
   타입의 방식으로 데이터가 내려간다. (키, 밸류 방식)

  @ResponseBody가 있으면 HttpMessageConverter 가 동작한다.
 단순문자면 StringHttpMessageConverter가 동작
 객체일 경우 MappingJackson2HttpMessageConverter가 동작한다.
	(대표적인 라이브러리 : Jackson라이브러리, Gson라이브러리)
 객체를 Json형식으로 바꿔서 요청한 웹브라우저나 서버에게 전송한다.










