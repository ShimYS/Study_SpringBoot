<스프링 DB 접근 기술>
1. 순수 jdbc
- build.gradle 파일의 depemdencies에 jdbc, h2 데이터베이스 관련 라이브러리 추가
'''
implementation 'org.springframework.boot:spring-boot-starter-jdbc'
runtimeOnly 'com.h2database:h2'
'''

*** 자바는 기본적으로 데이터베이스를 활용하기 위해서는 jdbc 드라이버가 꼭 필요하다.


- 스프링 부트 데이터베이스 연결 설정 추가
resources/application.properties에 경로와 드라이버 이름 추가
'''
spring.datasource.url=jdbc:h2:tcp://localhost/~/test
spring.datasource.driver-class-name=org.h2.Driver
'''

- MemberRepository 인터페이스의 구현체 교체
기존 MemoryMemberRepository클래스에서 JdbcMemberRepository로 교체
마찬가지로 저장소가 바뀔경우 구현체를 교체해주면 된다.

- DataSource
데이터베이스에 접근하려면 DataSource(Javax.sql.DataSource)가 필요
DataSource는 데이터베이스 커넥션을 획득할 때 사용하는 객체다. 스프링 부트는 
데이터베이스 커넥션 정보를 바탕으로 DataSource를 생성하고 스프링 빈으로 
만들어둔다. 그래서 DI를 받을 수 있다.

*** 메모리 저장 방식에서 데이터베이스 저장 방식으로 바꾸면서 스프링을 사용하는 
이유를 생각해보자
	스프링의 DI방식을 사용하면 저장 방식에 변경이 발생하였지만 기존 코드를
	전혀 손대지 않고, 설정만으로 구현 클래스를 변경 할 수 있다. 
	(개방-폐쇄 원칙<OCP> 확장에는 열려있고, 수정/변경에는 닫혀있다.)




2. 스프링 JdbcTemplate
- 순수 Jdbc와 동일한 환경설정을 하면 된다.
- 스프링 JdbcTamplate과 Mybatis 같은 라이브러리는 JDBC API에서 본 반복 코드를 대부분 제거해준다.
하지만 SQL은 직접 작성해야 한다.
	



3. JPA
- JPA는 기존의 반복 코드는 물론이고, 기본적인 SQL도 JPA가 직접 만들어서 실행해준다.
- JPA를 사용하면, SQL과 데이터 중심의 설계에서 객체 중심의 설계로 패러다임을 전환을 할 수 있다.
- JPA를 사용하면 개발 생산성을 크게 높일 수 있다.
- JPA는 자바진영의 표준 인터페이스이고 구현은 여러 업체들이 한것. 각 업체마다 성능 차이가 있고 사용하는 방법도 차이가 있다.

- build.gradle 파일에 JPA, h2 데이터베이스 관련 라이브러리 추가
'''
implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
runtimeOnly 'com.h2database:h2'
'''
*** spring-boot-starter-data-jpa는 배우에 jdbc 관련 라이브러리를 포함한다. 따라서 jdbc는 제거해도 된다.

- 스프링 부트에 JPA 설정 추가
resources/application.properties에 설정 추가
'''
spring.datasource.url=jdbc:h2:tcp://localhost/~/test
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none
'''
*** show-sql : JPA가 생성하는 SQL을 출력한다.
*** ddl-auto : JPA가 객체를 참고해서 테이블을 자동으로 생성하는 기능을 제공하는데 none를 사용하면 해당 기능을 끈다.(이미 table을 생성하였기 때문에 none을 한것)
              create를 사용하면 엔티티 정보를 바탕으로 테이블도 직접 생성해준다.

- JPA 엔티티 매핑
domain(vo)에 @Entity를 붙여준다. 그러면 JPA가 관리하는 Entity가 된다.
PK를 설정할 속성에 @Id를 붙여준다.
DB에서 자동으로 생성해주는 'IDENTITY'인 경우 @GeneratedValue(strategy = GenerationType.IDENTITY)를 붙여준다.
속성과 데이터베이스의 Column을 연결하는 방법 : 해당 속성에 @Column(name = "컬럼명")을 붙여준다.

- Repository 구현
implementation 'org.springframework.boot:spring-boot-starter-data-jpa' 라이브러리를 설정해주면 스프링이 자동으로 EntityManager를 스프링 빈으로 생성해준다.
이 빈을 주입해주면 된다.


- Service 계층에 @Transactional 어노테이션을 붙여줘야 한다.


4. 스프링 데이터 JPA
- 스프링 부트와 JPA 기반위에, 스프링 데이터 JPA라는 프레임워크를 사용하는것
- 스프링 데이터 JPA를 사용하면, 기존의 한계를 넘어 리포지토리의 구현 클래스 없이 인터페이스 만으로 개발을 완료할 수 있다.
- 기본 CRUD 기능을 스프링 데이터 JPA가 모두 제공한다.
- 스프링 데이터 JPA가 JpaRepository를 상속받은 인터페이스를 보고 자동으로 스프링 빈에 등록한다.
  SpringConfig 설정에서 등록된 빈을 주입받아 사용한다.
- 실무에서는 JPA와 스프링 데이터 JPA를 기본으로 사요하고, 복잡한 동적 쿼리는 Querydsl이라는 라이버러리를 사용한다.

- 스프링 데이터 JPA 리포지토리
1) 인터페이스로 리포지토리를 생성한다.
2) JpaRepository를 상속받고 <도메인클래스, pk키>를 입력한다.
  예)
   public interface SpringDataJpaMemberRepository extends JpaRepository<Member, Long>, MemberRepository {

       @Override
       Optional<Member> findByName(String name);
   }
3) SpringCofig 설정 수정
  스프링 데이터 JPA에 상속받은 리포지 토리를 주입받는다. 
  서비스에 해당 리포지토리 객체를 주입한다.




*** JPQL
JPQL은 SQL과 비슷한 문법을 가진 객체지향쿼리다.

JPQL의 탄생 배경은 JPA에서 제공하는 메서드 호출만으로 섬세한 쿼리 작성이 어렵다는 것에 있다.
EntityManager 객체의 find() 메서드를 호출하여 SELECT 쿼리를 수행 할 수도 있다. 하지만 find() 메서드는 식별자를 통해서만 데이터 조회를 하며, 조건문도 없고
모든 칼럼을 조히하는 메서드이다. 이것만 가지고는 조금이라도 복잡한 검색을 수행할 수 없다. 따라서 여러 조건을 통해 검색을 하는 방법이 필요했고 그래서 JPQL이 개발됨.

JPQL 특징
1. 테이블이 아닌 객체를 검색하는 객체지향쿼리
2. SQL을 추상화 했기 때문에 특정 벤더에 종속적이지 않음
3. JPA는 JPQL을 분석하여 SQL을 생성한 후 DB에서 조회

JPQL 기본문법
string jpql = "select c from Category c";
JPQL은 SQL과 문법이 매우 유사하지만 몇가지 다른 점이 있다.
1. 대소문자 구분
    엔티티와 속성은 대소문자를 구분한다.
    예를 들어 엔티티 이름인 User, User 엔티티의 속성인 email은 대소문자를 구분한다.
    반면에 SELECT, FROM, AS 같은 JPQL 키워드는 대소문자를 구분하지 않는다.
2. 엔티티 이름
    위의 예제에서 selct c from 뒤에 나오는 Category는 엔티티 이름이다.
    Category가 클래스 이름이라고 착각할 수 있는데, 그것이 아니라 @Entity(name="Category")로 설정한 엔티티 이름이다.
    참고로 name 속성을 생략하면 기본 값으로 클래스 이름을 사용한다.
3. 별칭
    select c from Category c에서 c라는 별칭을 주었다.
    JPQL에서 엔티티의 별칭은 필수적으로 명시해야 한다.
    별칭을 명시하는 AS 키워드는 생략할 수 있다.

JPQL은 복잡한 검색을 위해 사용되기 깨문에 INSERT, UPDATE, DELETE 쿼리는 엔티티 매니저가 직접 호출하도록 하는 것이 좋다.