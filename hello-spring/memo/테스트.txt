TDD(테스트주도개발) : 테스트코드를 먼저 작성해서 검증을 미리 한다음 개발을 하는 개발 방식.

- 스프링 종합 테스트 (스프링에 올려서 하는 테스트??) //MemberServiceIntegrationTest
테스트 클래스에 어노테이션을 붙여준다.
@SpringBootTest - 스프링 컨테이너와 테스트를 함께 실행시켜주는 역할

@Transactional - 테스트 시작 전에 트랜잭션을 시작하고, 테스트 완료 후에 롤백해주는 역할. 이렇게 하면 DB에 데이터가 남지 않으므로
	다음 테스트에 영향을 주지 않는다. 즉, 반복적인 테스트가 가능하도록 해준다.
	(단, 테스트하는 메소드에 @Commit 어노테이션을 붙이면 Commit을 하게된다.)

@Autowired - 테스트에 필요한 객체에 붙이고 주입받아 사용한다.

----- 예  시 -----
@SpringBootTest
@Transactional
class MemberServiceIntegrationTest {

    @Autowired MemberService memberService;
    @Autowired MemberRepository memberRepository;

    @Test
    void join() {
        // given 무언가 주워졌는데
        Member member = new Member();
        member.setName("spring");

        // when 이걸 실행했을때
        Long saveId = memberService.join(member);

        // then 결과는 이렇게 나와야해
        Member findMember = memberService.findOne(saveId).get();
        assertThat(member.getName()).isEqualTo(findMember.getName());
    }
}


- 단위 테스트 (자바코드선에서 하는 테스트??) // MemberServiceTest





*** 가능하면 단위 테스트가 좋다. 스프링에 올려서 하는 테스트라면 테스트 설계가 잘못되어있는 경우가 많다.
(공부를 해봐야 이해가 될듯!!!!!!!!!!!!!!!!)
